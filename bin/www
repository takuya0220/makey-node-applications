#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('makey-node-applications:server');
var http = require('http');
var Slack = require('slack-node');
var cronJob = require('cron').CronJob;
var Wagaya = require('wagaya-100yen-menu');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

var wagaya = new Wagaya();

function doFindWagaya(where, callback) {
    wagaya.findWagaya100Yen({
        ym: '2018年3月'
    }, function(err, data) {
        console.log(data);
    });
};

function doInsertWagaya() {
    wagaya.insertWagaya100Yen();
}

function setupCron() {
    var cronTime = "0 0 4 1 * *";
    var job = new cronJob({
        cronTime: cronTime,
        onTick: function() {
            var wagaya = new Wagaya();
            wagaya.insertWagaya100Yen();
        },
        onComplete: function() {
            console.log('onComplete!')
        },
        start: false,
        timeZone: "Asia/Tokyo"
    });
    job.start();
}

function slackWebhook() {
    var slack = new Slack();
    var webhookUri = 'https://hooks.slack.com/services/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';
    slack.setWebhook(webhookUri);
}
